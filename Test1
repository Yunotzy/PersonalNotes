
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Notes App</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      padding: 20px;
      max-width: 700px;
      margin: auto;
      transition: background-color 0.3s, color 0.3s;
    }
    body.light {
      background-color: #f4f4f4;
      color: #222;
    }
    body.dark {
      background-color: #1e1e1e;
      color: #e0e0e0;
    }
    .header {
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    #dateTime {
      font-size: 0.9em;
      margin-top: 5px;
    }
    .switch-container {
      display: flex;
      align-items: center;
    }
    .switch {
      position: relative;
      display: inline-block;
      width: 50px;
      height: 24px;
      margin-left: 10px;
    }
    .switch input {
      opacity: 0;
      width: 0;
      height: 0;
    }
    .slider {
      position: absolute;
      cursor: pointer;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: #ccc;
      transition: 0.3s;
      border-radius: 24px;
    }
    .slider:before {
      position: absolute;
      content: "";
      height: 18px;
      width: 18px;
      left: 3px;
      bottom: 3px;
      background-color: white;
      transition: 0.3s;
      border-radius: 50%;
    }
    input:checked + .slider {
      background-color: #2196f3;
    }
    input:checked + .slider:before {
      transform: translateX(26px);
    }
    .note {
      padding: 10px;
      margin-top: 10px;
      border-radius: 5px;
      display: flex;
      justify-content: space-between;
      align-items: center;
      font-size: 10px;
    }
    .light .note {
      background: #ffffff;
    }
    .dark .note {
      background: #2c2c2c;
    }
    .note-text {
      flex-grow: 1;
      margin-right: 10px;
      word-break: break-word;
    }
    .note-tag {
      font-size: 0.85em;
      color: #888;
      margin-top: 4px;
    }
    input, textarea, select, button {
      padding: 10px;
      margin: 5px 0;
      width: 100%;
      box-sizing: border-box;
      border-radius: 4px;
      border: 1px solid #999;
      transition: background-color 0.3s, color 0.3s;
    }
    .light input, .light textarea, .light button, .light select {
      background-color: #fff;
      color: #000;
    }
    .dark input, .dark textarea, .dark button, .dark select {
      background-color: #2a2a2a;
      color: #e0e0e0;
      border: 1px solid #444;
    }
    .note-buttons button {
      width: auto;
      padding: 5px 10px;
      margin-left: 5px;
    }
    footer {
      margin-top: 40px;
      padding-top: 20px;
      border-top: 1px solid #444;
      text-align: center;
    }
    footer a {
      margin-right: 10px;
      text-decoration: none;
      cursor: pointer;
    }
    .light footer a {
      color: #0077cc;
    }
    .dark footer a {
      color: #80caff;
    }
    #noteForm {
      display: none;
      margin-top: 15px;
    }

   /* Sidebar Styles */
   .hamburger {
     position: fixed;
     top: 20px;
     left: 10px;
     font-size: 24px;
     cursor: pointer;
     z-index: 1001;
     writing-mode: vertical-rl;
     text-orientation: mixed;
   }

   #sidebar {
     position: fixed;
     top: 0;
     left: -280px;
     width: 260px;
     height: 100%;
     background-color: #222;
     color: white;
     padding: 20px;
     box-shadow: 2px 0 10px rgba(0,0,0,0.4);
     transition: left 0.3s ease;
     z-index: 1000;
     overflow-y: auto;
   }

   #sidebar textarea,
   #sidebar input,
   #sidebar button {
     width: 100%;
     margin-bottom: 10px;
     box-sizing: border-box;
   }

   #sidebar.active {
     left: 0;
   }

   .close-btn {
     background: none;
     color: white;
     border: none;
     font-size: 20px;
     float: right;
     cursor: pointer;
   }

   .light #sidebar {
     background-color: #f0f0f0;
     color: #222;
   }

   .light .close-btn {
     color: #222;
   }

.footer-links {
  display: flex;
  justify-content: center;
  gap: 30px;
  flex-wrap: wrap;
  margin-top: 10px;
}

.link-item {
  display: flex;
  flex-direction: column;
  align-items: center;
  text-align: center;
}

.link-item img {
  width: 20px;
  height: 20px;
  margin-bottom: 5px;
}

.link-item a {
  text-decoration: none;
  cursor: pointer;
  font-size: 7px;
}

.light .link-item a {
  color: #0077cc;
}

.dark .link-item a {
  color: #80caff;
}

.modal-overlay {
  position: fixed;
  top: 0; left: 0;
  width: 100%; height: 100%;
  background-color: rgba(0,0,0,0.6);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 2000;
}

.modal-content {
  background-color: #2c2c2c;
  padding: 20px;
  border-radius: 10px;
  width: 90%;
  max-width: 500px;
  color: #fff;
}

.light .modal-content {
  background-color: #f0f0f0;
  color: #000;
}

.modal-content textarea, .modal-content input {
  width: 100%;
  margin-top: 10px;
  padding: 10px;
  box-sizing: border-box;
  border-radius: 5px;
}

.modal-buttons {
  display: flex;
  justify-content: flex-end;
  gap: 10px;
  margin-top: 15px;
}

  </style>
</head>
<body>
<div class="hamburger" onclick="toggleSidebar()">‚ò∞</div>

<div id="sidebar">
  <button class="close-btn" onclick="toggleSidebar()">‚úñ</button>
  <h3>Add a New Note</h3>
  <textarea id="noteInput" placeholder="Write a note..." rows="4"></textarea>
  <input id="tagInput" placeholder="Optional tag or category (e.g. Work, Ideas)" />
  <button onclick="addNote()">Add Note</button>
</div>

  <div class="header">
    <h1>üìù Notes App</h1>
    <div class="switch-container">
      <label for="themeSwitch">üåô/‚òÄÔ∏è</label>
      <label class="switch">
        <input type="checkbox" id="themeSwitch" onchange="toggleTheme()" />
        <span class="slider"></span>
      </label>
    </div>
  </div>

  <div id="dateTime">Loading Philippine Time...</div>

  <input id="searchInput" placeholder="Search notes or tags..." oninput="searchNotes()" />
  <select id="categoryFilter" onchange="searchNotes()">
    <option value="">Filter by category</option>
  </select>

  <button onclick="toggleShowAll()" id="showAllBtn">Show All Notes</button>

  <div id="notesContainer"></div>

<footer>
  <p>Quick Links:</p>
  <div class="footer-links">
    <div class="link-item">
      <img src="https://www.text.com/brand-assets/livechat/DIGITAL%20(RGB)/SVG/LiveChat-Logo-Mark.svg">
      <a onclick="openMiniWindow(event, 'https://my.livechatinc.com/home')">P88LiveChat</a>
    </div>
    <div class="link-item">
      <img src="https://admin.barahazone.com/images/barahazone/icon.png">
      <a onclick="openMiniWindow(event, 'https://admin.barahazone.com/login')">Backend</a>
    </div>
    <div class="link-item">
      <img src="https://upload.wikimedia.org/wikipedia/commons/5/5b/Google_Forms_2020_Logo.svg">
      <a onclick="openMiniWindow(event, 'https://docs.google.com/forms/d/e/1FAIpQLSdWv3E6Lh4gJemmTMGie9f2s0Dl8UqsiWyNOgHXsF46HNw5xw/viewform')">AttendanceSheet</a>
    </div>
  </div>
</footer>

  <script>
    let notes = [];
    let showAllNotes = false;

    function toggleNoteForm() {
      const form = document.getElementById('noteForm');
      form.style.display = form.style.display === 'none' ? 'block' : 'none';
    }

    function addNote() {
      const noteInput = document.getElementById('noteInput');
      const tagInput = document.getElementById('tagInput');
      const text = noteInput.value.trim();
      const tag = tagInput.value.trim();
      if (text) {
        notes.push({ text, tag, pinned: false });
        noteInput.value = '';
        tagInput.value = '';
        saveNotes();
        renderNotes();
        toggleSidebar();
      }
    }
   function renderNotes(filter = '', categoryFilter = '') {
  const container = document.getElementById('notesContainer');
  container.innerHTML = '';

  const isFiltering = filter.trim() !== '' || categoryFilter.trim() !== '';

  const filtered = notes
    .map((note, index) => ({ ...note, index }))
    .filter(n =>
      (n.text.toLowerCase().includes(filter.toLowerCase()) ||
       n.tag.toLowerCase().includes(filter.toLowerCase())) &&
      (categoryFilter === '' || n.tag.toLowerCase() === categoryFilter.toLowerCase())
    )
    .filter(n => showAllNotes || n.pinned || isFiltering)
    .sort((a, b) => b.pinned - a.pinned);

  if (filtered.length === 0) {
    container.innerHTML = '<p>No matching notes found.</p>';
  } else {
    filtered.forEach(({ text, tag, index, pinned }) => {
      const div = document.createElement('div');
      div.className = 'note';

      const noteContent = document.createElement('div');
      noteContent.className = 'note-text';
      
      // Preserve line breaks by converting \n to <br>
      const formattedText = text.replace(/\n/g, '<br>');
      noteContent.innerHTML = `<strong>${formattedText}</strong>`;

      if (tag) {
        const tagEl = document.createElement('div');
        tagEl.className = 'note-tag';
        tagEl.textContent = `#${tag}`;
        noteContent.appendChild(tagEl);
      }

      const buttons = document.createElement('div');
      buttons.className = 'note-buttons';

      const pinBtn = document.createElement('button');
      pinBtn.textContent = pinned ? 'üìç Unpin' : 'üìå Pin';
      pinBtn.onclick = () => togglePin(index);
  

      const editBtn = document.createElement('button');
      editBtn.textContent = 'Edit';
      editBtn.onclick = () => editNote(index);

      const deleteBtn = document.createElement('button');
      deleteBtn.textContent = 'Delete';
      deleteBtn.onclick = () => deleteNote(index);

      buttons.appendChild(pinBtn);
      buttons.appendChild(editBtn);
      buttons.appendChild(deleteBtn);

      div.appendChild(noteContent);
      div.appendChild(buttons);
      container.appendChild(div);
    });
  }

  updateCategoryDropdown();
}
   let editIndex = null;
    function togglePin(index) {
      notes[index].pinned = !notes[index].pinned;
      saveNotes();
      renderNotes();
    }
    function editNote(index) {
      editIndex = index;
      document.getElementById('editNoteInput').value = notes[index].text;
      document.getElementById('editTagInput').value = notes[index].tag || '';
      document.getElementById('editModal').style.display = 'flex';
    }
    function confirmEdit() {
   const newText = document.getElementById('editNoteInput').value.trim();
   const newTag = document.getElementById('editTagInput').value.trim();
   if (newText) {
     notes[editIndex].text = newText;
     notes[editIndex].tag = newTag;
     saveNotes();
     renderNotes();
   }
   closeModal();
 }

    function closeModal() {
   document.getElementById('editModal').style.display = 'none';
   editIndex = null;
   }

    function deleteNote(index) {
      if (confirm('Delete this note?')) {
        notes.splice(index, 1);
        saveNotes();
        renderNotes();
      }
    }

    function searchNotes() {
      const query = document.getElementById('searchInput').value;
      const category = document.getElementById('categoryFilter').value;
      renderNotes(query, category);
    }

    function toggleShowAll() {
      showAllNotes = !showAllNotes;
      document.getElementById('searchInput').value = '';
      document.getElementById('categoryFilter').value = '';
      renderNotes();
    }

    function saveNotes() {
      localStorage.setItem('notes', JSON.stringify(notes));
    }

    function updateCategoryDropdown() {
      const select = document.getElementById('categoryFilter');
      const uniqueTags = [...new Set(notes.map(n => n.tag).filter(Boolean))];
      const selectedValue = select.value;
      select.innerHTML = '<option value="">Filter by category</option>';
      uniqueTags.forEach(tag => {
        const option = document.createElement('option');
        option.value = tag;
        option.textContent = tag;
        if (tag === selectedValue) {
          option.selected = true;
        }
        select.appendChild(option);
      });
    }

    function toggleTheme() {
      const isLight = document.getElementById('themeSwitch').checked;
      document.body.classList.toggle('light', isLight);
      document.body.classList.toggle('dark', !isLight);
      localStorage.setItem('theme', isLight ? 'light' : 'dark');
    }

    function loadTheme() {
      const savedTheme = localStorage.getItem('theme') || 'dark';
      const isLight = savedTheme === 'light';
      document.body.classList.add(isLight ? 'light' : 'dark');
      document.getElementById('themeSwitch').checked = isLight;
    }

    function updatePhilippineTime() {
      const now = new Date();
      const phTime = new Date(now.toLocaleString("en-US", { timeZone: "Asia/Manila" }));
      const formatted = phTime.toLocaleString('en-PH', {
        weekday: 'short', year: 'numeric', month: 'short',
        day: 'numeric', hour: '2-digit', minute: '2-digit', second: '2-digit',
        hour12: true
      });
      document.getElementById('dateTime').textContent = `üìÖ Philippine Time: ${formatted}`;
    }

    function openMiniWindow(event, url) {
      event.preventDefault();
      window.open(
        url,
        'popupWindow',
        'width=800,height=600,resizable=yes,scrollbars=yes'
      );
    }

    setInterval(updatePhilippineTime, 1000);

    window.onload = function () {
      loadTheme();
      const savedNotes = localStorage.getItem('notes');
      if (savedNotes) {
        notes = JSON.parse(savedNotes);
      }
      renderNotes();
      updatePhilippineTime();
    };
function toggleSidebar() {
  document.getElementById('sidebar').classList.toggle('active');
}
function exportNotes() {
  const blob = new Blob([JSON.stringify(notes, null, 2)], { type: 'application/json' });
  const url = URL.createObjectURL(blob);
  const a = document.createElement('a');
  a.href = url;
  a.download = 'notes-backup.json';
  a.click();
  URL.revokeObjectURL(url);
}

function importNotes(event) {
  const file = event.target.files[0];
  if (!file) return;

  const reader = new FileReader();
  reader.onload = function(e) {
    try {
      const imported = JSON.parse(e.target.result);
      if (Array.isArray(imported)) {
        if (confirm("Importing will replace all current notes. Continue?")) {
          notes = imported;
          saveNotes();
          renderNotes();
          alert("Notes successfully imported.");
        }
      } else {
        alert("Invalid file format.");
      }
    } catch (err) {
      alert("Failed to load notes. Error: " + err.message);
    }
  };
  reader.readAsText(file);
}
document.addEventListener('click', function(e) {
  const sidebar = document.getElementById('sidebar');
  const hamburger = document.querySelector('.hamburger');
  if (!sidebar.contains(e.target) && !hamburger.contains(e.target)) {
    sidebar.classList.remove('active');
  }
});

  </script>
<div id="editModal" style="display:none;" class="modal-overlay">
  <div class="modal-content">
    <h3>Edit Note</h3>
    <textarea id="editNoteInput" rows="6"></textarea>
    <input id="editTagInput" placeholder="Edit tag (optional)" />
    <div class="modal-buttons">
      <button onclick="confirmEdit()">Save</button>
      <button onclick="closeModal()">Cancel</button>
    </div>
  </div>
</div>
<div style="margin-top: 10px; text-align: center;">
<div class="header-right">
  <button onclick="exportNotes()">Export Notes</button>
  <input type="file" accept="application/json" onchange="importNotes(event)" style="display:inline-block; margin-left:10px;">
</div>
  </label>
</div>
<div id="quicklinkPopup" class="popup hidden">
  <div class="popup-header">
    <span>Quick Link Preview</span>
    <button id="closePopup">&times;</button>
  </div>
  <iframe id="quicklinkFrame" src="" frameborder="0"></iframe>
</div>
</body>
</html>
